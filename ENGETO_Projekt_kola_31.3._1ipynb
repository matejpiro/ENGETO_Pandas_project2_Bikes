{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "38585be8",
   "metadata": {},
   "source": [
    "## Načti data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "id": "eb6d38cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import sqlalchemy\n",
    "\n",
    "from datetime import datetime as datealias\n",
    "\n",
    "from math import radians\n",
    "from sklearn.neighbors import DistanceMetric \n",
    "from geopy import distance\n",
    "\n",
    "user = \"student\"\n",
    "password = \"p7%40vw7MCatmnKjy7\"\n",
    "conn_string = f\"mysql+pymysql://{user}:{password}@data.engeto.com/data\"\n",
    "alchemy_conn = sqlalchemy.create_engine(conn_string)\n",
    "\n",
    "df = pd.read_sql('edinburgh_bikes',\n",
    "                alchemy_conn)\n",
    "\n",
    "df_weather = pd.read_sql('edinburgh_weather', alchemy_conn)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84180287",
   "metadata": {},
   "source": [
    "## První pohled na data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f237a938",
   "metadata": {},
   "source": [
    "POZN:\n",
    "- tabulka má 438 259 záznamů # df.shape\n",
    "- duration je v sekundách # byli by hodní, kdyby to tam psali rovnou\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "id": "9de4fb0b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-15 08:52:05</td>\n",
       "      <td>2018-09-15 09:11:48</td>\n",
       "      <td>1182</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954728</td>\n",
       "      <td>-3.192653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2018-09-15 09:24:33</td>\n",
       "      <td>2018-09-15 09:41:09</td>\n",
       "      <td>995</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954749</td>\n",
       "      <td>-3.192774</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2018-09-15 09:48:54</td>\n",
       "      <td>2018-09-15 10:46:40</td>\n",
       "      <td>3466</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>250</td>\n",
       "      <td>Victoria Quay</td>\n",
       "      <td>Entrance to Scottish Government Office</td>\n",
       "      <td>55.977638</td>\n",
       "      <td>-3.174116</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index           started_at             ended_at  duration  \\\n",
       "0      0  2018-09-15 08:52:05  2018-09-15 09:11:48      1182   \n",
       "1      1  2018-09-15 09:24:33  2018-09-15 09:41:09       995   \n",
       "2      2  2018-09-15 09:48:54  2018-09-15 10:46:40      3466   \n",
       "\n",
       "   start_station_id start_station_name         start_station_description  \\\n",
       "0               247   Charlotte Square  North Corner of Charlotte Square   \n",
       "1               259   St Andrew Square                 North East corner   \n",
       "2               262         Canonmills                      near Tesco's   \n",
       "\n",
       "   start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "0               55.952335                -3.207101             259   \n",
       "1               55.954749                -3.192774             262   \n",
       "2               55.962804                -3.196284             250   \n",
       "\n",
       "   end_station_name                 end_station_description  \\\n",
       "0  St Andrew Square                       North East corner   \n",
       "1        Canonmills                            near Tesco's   \n",
       "2     Victoria Quay  Entrance to Scottish Government Office   \n",
       "\n",
       "   end_station_latitude  end_station_longitude  \n",
       "0             55.954728              -3.192653  \n",
       "1             55.962804              -3.196284  \n",
       "2             55.977638              -3.174116  "
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d795f26",
   "metadata": {},
   "source": [
    "## Nejfrekventovanější stanice"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82e3fb47",
   "metadata": {},
   "source": [
    "POSTUP:\n",
    "- zjistím počet unikátních stanic pomocí .nunique()\n",
    "- zjistím které stanice jsou nejvíce využívány pomocí .value_counts() součtem využítí koncových a počátečních stanic\n",
    "    - v procesu zahodím nuly pomocí .dropna() a stanice seřadím pomocí .sort_values(ascending=False)\n",
    "- pro nejfrekventovanější stanice vytvořím graf pomocí .plot.bar()\n",
    "POZNÁMKA:\n",
    "- 199 unikátních stanic nemusí být nutně pravda, protože některé se nemusí překrývat. Šlo by zkoumat dál."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb964bc7",
   "metadata": {},
   "source": [
    "Počet unikátních stanic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "id": "75bb2655",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "198"
      ]
     },
     "execution_count": 272,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.start_station_id.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "id": "3edf4b10",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "199"
      ]
     },
     "execution_count": 273,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.end_station_id.nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d24ba735",
   "metadata": {},
   "source": [
    "Existuje 199 unikátních stanic. (Ono to tak být nemusí... protože některé se nemusí překrývat)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb480760",
   "metadata": {},
   "source": [
    "Nejvíce využívané počáteční a koncové stanice (přes .value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "id": "639b9425",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "best_start_stations = df.start_station_id.value_counts().head(30)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "id": "33a6cf33",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "best_end_stations = df.end_station_id.value_counts().head(30)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41a5e00c",
   "metadata": {},
   "source": [
    "25 Nejfrekventovanějších stanic:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "id": "3da77ba7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Počet výpůjček')"
      ]
     },
     "execution_count": 276,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "best_stations = (best_end_stations + best_start_stations).dropna() # součet výskytu počátečních a koncových\n",
    "best_stations.sort_values(ascending=False).plot.bar(title='25 nejfrekventovanějších stanic') # seřaď hodnoty, vytvoř graf\n",
    "plt.xlabel('číslo stanice') \n",
    "plt.ylabel('Počet výpůjček')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b070a3d8",
   "metadata": {},
   "source": [
    "## Aktivní a neaktivní stanice"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13becb10",
   "metadata": {},
   "source": [
    "POSTUP:\n",
    "- sečti počet záznamů pro každou stanici pomocí value_counts(), zahoď chybějící hodnoty pomocí .dropna()\n",
    "- nastav si hodnotu od které považuješ stanice za neaktivní (rozhodl jsem se pro spodní decil výskytu hodnot). Tohle nastavení je jen má úvaha. Šlo by jinak. \n",
    "- najdi neaktivní stanice před [podmínka].index a zobraz graf přes .plot.bar()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e520b100",
   "metadata": {},
   "source": [
    "Sečti počet záznamů pro každou stanici (počet výskytů počátečních a počet výskytů koncových stanic pro ID stanice) a zahoď chybějící hodnoty (jsou tam 3x)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "id": "246f9b94",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "sum_start_end_stations = (df.end_station_id.value_counts()+df.start_station_id.value_counts())\n",
    "sum_start_end_stations_2 = sum_start_end_stations.dropna()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6b6cde9",
   "metadata": {},
   "source": [
    "Základní popisná statistika pro součet záznamů"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "id": "d2c69279",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count      197.000000\n",
       "mean      4449.299492\n",
       "std       5699.526410\n",
       "min          3.000000\n",
       "25%        541.000000\n",
       "50%       2242.000000\n",
       "75%       6039.000000\n",
       "max      32615.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 278,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum_start_end_stations_2.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae310df4",
   "metadata": {},
   "source": [
    "Za neaktivní považuji stanice, které někdo použil méněkrát než odpovídá spodnímu decilu (všechny ostatní považuji za aktivní). Najdi hodnotu odpovídající percentilu 10% (tedy spodním decilu)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "id": "764e70a0",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "81.80000000000001"
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum_start_end_stations_2.quantile(q=0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "890fb334",
   "metadata": {},
   "source": [
    "\n",
    "Neaktivní jsou tedy následující stanice:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "id": "7e48981b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Celkový počet výpůjček')"
      ]
     },
     "execution_count": 280,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_neaktivni = sum_start_end_stations_2.drop(sum_start_end_stations_2[sum_start_end_stations_2>81.8].index) \n",
    "df_neaktivni.sort_values(ascending=True).plot.bar(title='Neaktivní stanice')\n",
    "plt.xlabel('číslo stanice') \n",
    "plt.ylabel('Celkový počet výpůjček')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "915daf15",
   "metadata": {},
   "source": [
    "## Délka výpůjčky, odlehlé hodnoty, histogram"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95e3af7d",
   "metadata": {},
   "source": [
    "POSTUP:\n",
    "- pracuji se sloupcem \"duration\"\n",
    "- najdi průměrnou délku výpůjčky přes .mean()\n",
    "- zobraz histogram výpůjček přes .plot()\n",
    "- najdi maximální hodnotu výpůjčky v sekundách a převeď ji na dny. \n",
    "- zobraz záznamy, které popisují 1% nejvyšších a nejnižších hodnot. Tedy najdi hodnotu pro percentily 99 a 1 přes .percentile()\n",
    "- pomocí .query(\"podmínka\") zobraz záznamy (Je jich přes 4000 tak tady dělat graf mi přijde zbytečně nepřehledné).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fb64764",
   "metadata": {},
   "source": [
    "Základní popisná statistika pro délku výpůjček (sloupec \"duration\")."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "id": "fe73f304",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    4.382590e+05\n",
       "mean     1.948838e+03\n",
       "std      5.657135e+03\n",
       "min      6.100000e+01\n",
       "25%      6.240000e+02\n",
       "50%      1.163000e+03\n",
       "75%      2.529000e+03\n",
       "max      2.363348e+06\n",
       "Name: duration, dtype: float64"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duration.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98eca77e",
   "metadata": {},
   "source": [
    "Jak dlouho průměrně trvá jedna výpujčka?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "id": "6e2c8d4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1948.8380386940144"
      ]
     },
     "execution_count": 282,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duration.mean()# sekundy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "id": "34983a55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32.48063397823357"
      ]
     },
     "execution_count": 283,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duration.mean()/60 # minuty"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd38e04f",
   "metadata": {},
   "source": [
    "Jedna výpujčka trvá průměrně 1948.8 sekund. Tedy asi 32 a půl minuty (přesně 32 minut a 29 sekund).  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2093f99a",
   "metadata": {},
   "source": [
    "Histogram (v minutách)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "id": "dd065c5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_minutes=df.duration/60"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "id": "c0df6714",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Délka výpůjčky (min)')"
      ]
     },
     "execution_count": 285,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_minutes.plot(figsize = (16,6),title='Délka výpůjček') # v minutách\n",
    "plt.xlabel('číslo výpůjčky') \n",
    "plt.ylabel('Délka výpůjčky (min)')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c00c3281",
   "metadata": {},
   "source": [
    "Histogram zobrazuje jednu výrazně odlehlou hodnotu (tu maximální). \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0f80f91",
   "metadata": {},
   "source": [
    "Najdi maximální hodnotu a převeď ji na dny."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "id": "64308955",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2363348"
      ]
     },
     "execution_count": 286,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duration.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "4e9cba39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27.353564814814813"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duration.max()/86400 # na dny"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21277596",
   "metadata": {},
   "source": [
    "Nejdelší výpujčka trvala 2 363 348 sekund, tedy asi 27,3 dne. To bude buď chyba v datech, nebo jen někdo na dlouho zapomněl kolo vrátit:)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33da16e0",
   "metadata": {},
   "source": [
    "### Odlehlé hodnoty"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fd833a1",
   "metadata": {},
   "source": [
    "Zobraz záznamy, které popisují 1% nejvyšších hodnot. (Najdi hodnotu pro percentil 99 a zobraz záznamy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "id": "f6a4ee22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11188.419999999984\n"
     ]
    }
   ],
   "source": [
    "x = np.percentile(df.duration,99)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "id": "8408f521",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>153</th>\n",
       "      <td>153</td>\n",
       "      <td>2018-09-17 13:14:32</td>\n",
       "      <td>2018-09-17 16:47:41</td>\n",
       "      <td>12789</td>\n",
       "      <td>258</td>\n",
       "      <td>Stockbridge</td>\n",
       "      <td>Hamilton Place by Dean Bank Lane</td>\n",
       "      <td>55.958566</td>\n",
       "      <td>-3.208070</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954749</td>\n",
       "      <td>-3.192774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>262</td>\n",
       "      <td>2018-09-17 16:35:10</td>\n",
       "      <td>2018-09-17 22:30:58</td>\n",
       "      <td>21347</td>\n",
       "      <td>183</td>\n",
       "      <td>Waverley Bridge</td>\n",
       "      <td>near the top of the South ramp</td>\n",
       "      <td>55.951344</td>\n",
       "      <td>-3.191421</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>301</th>\n",
       "      <td>301</td>\n",
       "      <td>2018-09-17 17:08:23</td>\n",
       "      <td>2018-09-17 23:22:32</td>\n",
       "      <td>22448</td>\n",
       "      <td>171</td>\n",
       "      <td>George Square</td>\n",
       "      <td>George Square, south side in front of Universi...</td>\n",
       "      <td>55.943084</td>\n",
       "      <td>-3.188311</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>384</td>\n",
       "      <td>2018-09-17 19:45:31</td>\n",
       "      <td>2018-09-18 00:01:52</td>\n",
       "      <td>15380</td>\n",
       "      <td>261</td>\n",
       "      <td>Brunswick Place</td>\n",
       "      <td>Junction Brunswick Street and Elm Row</td>\n",
       "      <td>55.960930</td>\n",
       "      <td>-3.181005</td>\n",
       "      <td>266</td>\n",
       "      <td>Victoria Park</td>\n",
       "      <td>Near Craighall Road</td>\n",
       "      <td>55.974247</td>\n",
       "      <td>-3.194482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>385</th>\n",
       "      <td>385</td>\n",
       "      <td>2018-09-17 19:49:03</td>\n",
       "      <td>2018-09-17 22:58:08</td>\n",
       "      <td>11345</td>\n",
       "      <td>248</td>\n",
       "      <td>Bristo Square</td>\n",
       "      <td>Bristo Square, near Potter Row</td>\n",
       "      <td>55.946004</td>\n",
       "      <td>-3.188665</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954749</td>\n",
       "      <td>-3.192774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436838</th>\n",
       "      <td>11220</td>\n",
       "      <td>2021-06-27 12:03:18</td>\n",
       "      <td>2021-06-27 15:17:10</td>\n",
       "      <td>11632</td>\n",
       "      <td>1823</td>\n",
       "      <td>Boroughmuir</td>\n",
       "      <td>Off Gibson Terrace</td>\n",
       "      <td>55.940071</td>\n",
       "      <td>-3.215336</td>\n",
       "      <td>1024</td>\n",
       "      <td>Meadow Place</td>\n",
       "      <td>End of Meadow Place</td>\n",
       "      <td>55.940238</td>\n",
       "      <td>-3.194640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436905</th>\n",
       "      <td>11287</td>\n",
       "      <td>2021-06-27 13:17:01</td>\n",
       "      <td>2021-06-27 18:04:11</td>\n",
       "      <td>17229</td>\n",
       "      <td>1025</td>\n",
       "      <td>Dundee Terrace</td>\n",
       "      <td>Corner of Dundee Street &amp; Dundee Terrace</td>\n",
       "      <td>55.939710</td>\n",
       "      <td>-3.220589</td>\n",
       "      <td>1025</td>\n",
       "      <td>Dundee Terrace</td>\n",
       "      <td>Corner of Dundee Street &amp; Dundee Terrace</td>\n",
       "      <td>55.939710</td>\n",
       "      <td>-3.220589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437338</th>\n",
       "      <td>11720</td>\n",
       "      <td>2021-06-28 16:09:23</td>\n",
       "      <td>2021-06-28 19:26:54</td>\n",
       "      <td>11850</td>\n",
       "      <td>1769</td>\n",
       "      <td>Brunswick Place</td>\n",
       "      <td>Corner of Elm Row/Brunswick Street</td>\n",
       "      <td>55.960852</td>\n",
       "      <td>-3.180986</td>\n",
       "      <td>1769</td>\n",
       "      <td>Brunswick Place</td>\n",
       "      <td>Corner of Elm Row/Brunswick Street</td>\n",
       "      <td>55.960852</td>\n",
       "      <td>-3.180986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437655</th>\n",
       "      <td>12037</td>\n",
       "      <td>2021-06-29 14:41:57</td>\n",
       "      <td>2021-06-29 19:08:41</td>\n",
       "      <td>16004</td>\n",
       "      <td>1024</td>\n",
       "      <td>Meadow Place</td>\n",
       "      <td>End of Meadow Place</td>\n",
       "      <td>55.940238</td>\n",
       "      <td>-3.194640</td>\n",
       "      <td>1024</td>\n",
       "      <td>Meadow Place</td>\n",
       "      <td>End of Meadow Place</td>\n",
       "      <td>55.940238</td>\n",
       "      <td>-3.194640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438069</th>\n",
       "      <td>12451</td>\n",
       "      <td>2021-06-30 15:55:20</td>\n",
       "      <td>2021-06-30 20:44:11</td>\n",
       "      <td>17330</td>\n",
       "      <td>1091</td>\n",
       "      <td>Holyrood Road</td>\n",
       "      <td>Opposite St Leonards Land</td>\n",
       "      <td>55.949560</td>\n",
       "      <td>-3.180413</td>\n",
       "      <td>1814</td>\n",
       "      <td>Abbeyhill</td>\n",
       "      <td>Near Abbey Mount</td>\n",
       "      <td>55.955248</td>\n",
       "      <td>-3.172216</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4383 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        index           started_at             ended_at  duration  \\\n",
       "153       153  2018-09-17 13:14:32  2018-09-17 16:47:41     12789   \n",
       "262       262  2018-09-17 16:35:10  2018-09-17 22:30:58     21347   \n",
       "301       301  2018-09-17 17:08:23  2018-09-17 23:22:32     22448   \n",
       "384       384  2018-09-17 19:45:31  2018-09-18 00:01:52     15380   \n",
       "385       385  2018-09-17 19:49:03  2018-09-17 22:58:08     11345   \n",
       "...       ...                  ...                  ...       ...   \n",
       "436838  11220  2021-06-27 12:03:18  2021-06-27 15:17:10     11632   \n",
       "436905  11287  2021-06-27 13:17:01  2021-06-27 18:04:11     17229   \n",
       "437338  11720  2021-06-28 16:09:23  2021-06-28 19:26:54     11850   \n",
       "437655  12037  2021-06-29 14:41:57  2021-06-29 19:08:41     16004   \n",
       "438069  12451  2021-06-30 15:55:20  2021-06-30 20:44:11     17330   \n",
       "\n",
       "        start_station_id start_station_name  \\\n",
       "153                  258        Stockbridge   \n",
       "262                  183    Waverley Bridge   \n",
       "301                  171      George Square   \n",
       "384                  261    Brunswick Place   \n",
       "385                  248      Bristo Square   \n",
       "...                  ...                ...   \n",
       "436838              1823        Boroughmuir   \n",
       "436905              1025     Dundee Terrace   \n",
       "437338              1769    Brunswick Place   \n",
       "437655              1024       Meadow Place   \n",
       "438069              1091      Holyrood Road   \n",
       "\n",
       "                                start_station_description  \\\n",
       "153                      Hamilton Place by Dean Bank Lane   \n",
       "262                        near the top of the South ramp   \n",
       "301     George Square, south side in front of Universi...   \n",
       "384                 Junction Brunswick Street and Elm Row   \n",
       "385                        Bristo Square, near Potter Row   \n",
       "...                                                   ...   \n",
       "436838                                 Off Gibson Terrace   \n",
       "436905           Corner of Dundee Street & Dundee Terrace   \n",
       "437338                 Corner of Elm Row/Brunswick Street   \n",
       "437655                                End of Meadow Place   \n",
       "438069                          Opposite St Leonards Land   \n",
       "\n",
       "        start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "153                  55.958566                -3.208070             259   \n",
       "262                  55.951344                -3.191421             247   \n",
       "301                  55.943084                -3.188311             264   \n",
       "384                  55.960930                -3.181005             266   \n",
       "385                  55.946004                -3.188665             259   \n",
       "...                        ...                      ...             ...   \n",
       "436838               55.940071                -3.215336            1024   \n",
       "436905               55.939710                -3.220589            1025   \n",
       "437338               55.960852                -3.180986            1769   \n",
       "437655               55.940238                -3.194640            1024   \n",
       "438069               55.949560                -3.180413            1814   \n",
       "\n",
       "        end_station_name                   end_station_description  \\\n",
       "153     St Andrew Square                         North East corner   \n",
       "262     Charlotte Square          North Corner of Charlotte Square   \n",
       "301        Pollock Halls                    Pollock Halls Entrance   \n",
       "384        Victoria Park                       Near Craighall Road   \n",
       "385     St Andrew Square                         North East corner   \n",
       "...                  ...                                       ...   \n",
       "436838      Meadow Place                       End of Meadow Place   \n",
       "436905    Dundee Terrace  Corner of Dundee Street & Dundee Terrace   \n",
       "437338   Brunswick Place        Corner of Elm Row/Brunswick Street   \n",
       "437655      Meadow Place                       End of Meadow Place   \n",
       "438069         Abbeyhill                          Near Abbey Mount   \n",
       "\n",
       "        end_station_latitude  end_station_longitude  \n",
       "153                55.954749              -3.192774  \n",
       "262                55.952335              -3.207101  \n",
       "301                55.939963              -3.171586  \n",
       "384                55.974247              -3.194482  \n",
       "385                55.954749              -3.192774  \n",
       "...                      ...                    ...  \n",
       "436838             55.940238              -3.194640  \n",
       "436905             55.939710              -3.220589  \n",
       "437338             55.960852              -3.180986  \n",
       "437655             55.940238              -3.194640  \n",
       "438069             55.955248              -3.172216  \n",
       "\n",
       "[4383 rows x 14 columns]"
      ]
     },
     "execution_count": 289,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.query(\"duration > 11188\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75def150",
   "metadata": {},
   "source": [
    "Zobraz záznamy, které popisují 1% nejnižších hodnot. (Najdi hodnotu pro percentil 1 a zobraz záznamy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "id": "7e3893fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "130.0\n"
     ]
    }
   ],
   "source": [
    "y = np.percentile(df.duration,1)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "id": "62070fe3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>2018-09-16 12:50:17</td>\n",
       "      <td>2018-09-16 12:51:30</td>\n",
       "      <td>72</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>2018-09-17 08:05:10</td>\n",
       "      <td>2018-09-17 08:06:30</td>\n",
       "      <td>79</td>\n",
       "      <td>189</td>\n",
       "      <td>City Chambers</td>\n",
       "      <td>City Chambers Quadrangle</td>\n",
       "      <td>55.950109</td>\n",
       "      <td>-3.190258</td>\n",
       "      <td>189</td>\n",
       "      <td>City Chambers</td>\n",
       "      <td>City Chambers Quadrangle</td>\n",
       "      <td>55.950109</td>\n",
       "      <td>-3.190258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>2018-09-17 08:51:53</td>\n",
       "      <td>2018-09-17 08:54:03</td>\n",
       "      <td>129</td>\n",
       "      <td>189</td>\n",
       "      <td>City Chambers</td>\n",
       "      <td>City Chambers Quadrangle</td>\n",
       "      <td>55.950109</td>\n",
       "      <td>-3.190258</td>\n",
       "      <td>189</td>\n",
       "      <td>City Chambers</td>\n",
       "      <td>City Chambers Quadrangle</td>\n",
       "      <td>55.950109</td>\n",
       "      <td>-3.190258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>2018-09-17 09:45:14</td>\n",
       "      <td>2018-09-17 09:46:29</td>\n",
       "      <td>75</td>\n",
       "      <td>189</td>\n",
       "      <td>City Chambers</td>\n",
       "      <td>City Chambers Quadrangle</td>\n",
       "      <td>55.950109</td>\n",
       "      <td>-3.190258</td>\n",
       "      <td>189</td>\n",
       "      <td>City Chambers</td>\n",
       "      <td>City Chambers Quadrangle</td>\n",
       "      <td>55.950109</td>\n",
       "      <td>-3.190258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>33</td>\n",
       "      <td>2018-09-17 09:47:24</td>\n",
       "      <td>2018-09-17 09:48:34</td>\n",
       "      <td>69</td>\n",
       "      <td>189</td>\n",
       "      <td>City Chambers</td>\n",
       "      <td>City Chambers Quadrangle</td>\n",
       "      <td>55.950109</td>\n",
       "      <td>-3.190258</td>\n",
       "      <td>189</td>\n",
       "      <td>City Chambers</td>\n",
       "      <td>City Chambers Quadrangle</td>\n",
       "      <td>55.950109</td>\n",
       "      <td>-3.190258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437401</th>\n",
       "      <td>11783</td>\n",
       "      <td>2021-06-28 18:23:00</td>\n",
       "      <td>2021-06-28 18:24:39</td>\n",
       "      <td>99</td>\n",
       "      <td>1726</td>\n",
       "      <td>Simon Square</td>\n",
       "      <td>Between Pleasance and Nicholson Street</td>\n",
       "      <td>55.944859</td>\n",
       "      <td>-3.182590</td>\n",
       "      <td>1726</td>\n",
       "      <td>Simon Square</td>\n",
       "      <td>Between Pleasance and Nicholson Street</td>\n",
       "      <td>55.944859</td>\n",
       "      <td>-3.182590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437475</th>\n",
       "      <td>11857</td>\n",
       "      <td>2021-06-29 00:15:17</td>\n",
       "      <td>2021-06-29 00:16:48</td>\n",
       "      <td>90</td>\n",
       "      <td>1824</td>\n",
       "      <td>Duke Street</td>\n",
       "      <td>Junction with Easter Road</td>\n",
       "      <td>55.969012</td>\n",
       "      <td>-3.167395</td>\n",
       "      <td>1824</td>\n",
       "      <td>Duke Street</td>\n",
       "      <td>Junction with Easter Road</td>\n",
       "      <td>55.969012</td>\n",
       "      <td>-3.167395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437568</th>\n",
       "      <td>11950</td>\n",
       "      <td>2021-06-29 11:04:58</td>\n",
       "      <td>2021-06-29 11:06:42</td>\n",
       "      <td>103</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437880</th>\n",
       "      <td>12262</td>\n",
       "      <td>2021-06-30 00:24:05</td>\n",
       "      <td>2021-06-30 00:25:18</td>\n",
       "      <td>73</td>\n",
       "      <td>1725</td>\n",
       "      <td>Edinburgh Zoo</td>\n",
       "      <td>Corstorphine Road, Edinburgh</td>\n",
       "      <td>55.942115</td>\n",
       "      <td>-3.269287</td>\n",
       "      <td>1725</td>\n",
       "      <td>Edinburgh Zoo</td>\n",
       "      <td>Corstorphine Road, Edinburgh</td>\n",
       "      <td>55.942115</td>\n",
       "      <td>-3.269287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438159</th>\n",
       "      <td>12541</td>\n",
       "      <td>2021-06-30 18:25:46</td>\n",
       "      <td>2021-06-30 18:27:18</td>\n",
       "      <td>91</td>\n",
       "      <td>1818</td>\n",
       "      <td>Dynamic Earth</td>\n",
       "      <td>Outside Dynamic Earth, Holyrood Road</td>\n",
       "      <td>55.951089</td>\n",
       "      <td>-3.175725</td>\n",
       "      <td>1818</td>\n",
       "      <td>Dynamic Earth</td>\n",
       "      <td>Outside Dynamic Earth, Holyrood Road</td>\n",
       "      <td>55.951089</td>\n",
       "      <td>-3.175725</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4315 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        index           started_at             ended_at  duration  \\\n",
       "9           9  2018-09-16 12:50:17  2018-09-16 12:51:30        72   \n",
       "15         15  2018-09-17 08:05:10  2018-09-17 08:06:30        79   \n",
       "21         21  2018-09-17 08:51:53  2018-09-17 08:54:03       129   \n",
       "30         30  2018-09-17 09:45:14  2018-09-17 09:46:29        75   \n",
       "33         33  2018-09-17 09:47:24  2018-09-17 09:48:34        69   \n",
       "...       ...                  ...                  ...       ...   \n",
       "437401  11783  2021-06-28 18:23:00  2021-06-28 18:24:39        99   \n",
       "437475  11857  2021-06-29 00:15:17  2021-06-29 00:16:48        90   \n",
       "437568  11950  2021-06-29 11:04:58  2021-06-29 11:06:42       103   \n",
       "437880  12262  2021-06-30 00:24:05  2021-06-30 00:25:18        73   \n",
       "438159  12541  2021-06-30 18:25:46  2021-06-30 18:27:18        91   \n",
       "\n",
       "        start_station_id start_station_name  \\\n",
       "9                    264      Pollock Halls   \n",
       "15                   189      City Chambers   \n",
       "21                   189      City Chambers   \n",
       "30                   189      City Chambers   \n",
       "33                   189      City Chambers   \n",
       "...                  ...                ...   \n",
       "437401              1726       Simon Square   \n",
       "437475              1824        Duke Street   \n",
       "437568               247   Charlotte Square   \n",
       "437880              1725      Edinburgh Zoo   \n",
       "438159              1818      Dynamic Earth   \n",
       "\n",
       "                     start_station_description  start_station_latitude  \\\n",
       "9                       Pollock Halls Entrance               55.939963   \n",
       "15                    City Chambers Quadrangle               55.950109   \n",
       "21                    City Chambers Quadrangle               55.950109   \n",
       "30                    City Chambers Quadrangle               55.950109   \n",
       "33                    City Chambers Quadrangle               55.950109   \n",
       "...                                        ...                     ...   \n",
       "437401  Between Pleasance and Nicholson Street               55.944859   \n",
       "437475               Junction with Easter Road               55.969012   \n",
       "437568        North Corner of Charlotte Square               55.952335   \n",
       "437880            Corstorphine Road, Edinburgh               55.942115   \n",
       "438159    Outside Dynamic Earth, Holyrood Road               55.951089   \n",
       "\n",
       "        start_station_longitude  end_station_id  end_station_name  \\\n",
       "9                     -3.171586             264     Pollock Halls   \n",
       "15                    -3.190258             189     City Chambers   \n",
       "21                    -3.190258             189     City Chambers   \n",
       "30                    -3.190258             189     City Chambers   \n",
       "33                    -3.190258             189     City Chambers   \n",
       "...                         ...             ...               ...   \n",
       "437401                -3.182590            1726      Simon Square   \n",
       "437475                -3.167395            1824       Duke Street   \n",
       "437568                -3.207101             247  Charlotte Square   \n",
       "437880                -3.269287            1725     Edinburgh Zoo   \n",
       "438159                -3.175725            1818     Dynamic Earth   \n",
       "\n",
       "                       end_station_description  end_station_latitude  \\\n",
       "9                       Pollock Halls Entrance             55.939963   \n",
       "15                    City Chambers Quadrangle             55.950109   \n",
       "21                    City Chambers Quadrangle             55.950109   \n",
       "30                    City Chambers Quadrangle             55.950109   \n",
       "33                    City Chambers Quadrangle             55.950109   \n",
       "...                                        ...                   ...   \n",
       "437401  Between Pleasance and Nicholson Street             55.944859   \n",
       "437475               Junction with Easter Road             55.969012   \n",
       "437568        North Corner of Charlotte Square             55.952335   \n",
       "437880            Corstorphine Road, Edinburgh             55.942115   \n",
       "438159    Outside Dynamic Earth, Holyrood Road             55.951089   \n",
       "\n",
       "        end_station_longitude  \n",
       "9                   -3.171586  \n",
       "15                  -3.190258  \n",
       "21                  -3.190258  \n",
       "30                  -3.190258  \n",
       "33                  -3.190258  \n",
       "...                       ...  \n",
       "437401              -3.182590  \n",
       "437475              -3.167395  \n",
       "437568              -3.207101  \n",
       "437880              -3.269287  \n",
       "438159              -3.175725  \n",
       "\n",
       "[4315 rows x 14 columns]"
      ]
     },
     "execution_count": 291,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.query(\"duration < 130\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09be2880",
   "metadata": {},
   "source": [
    "## Půjčují si lidé kola více o víkendu než během pracovního týdne?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "329b1be9",
   "metadata": {},
   "source": [
    "POSTUP:\n",
    "- přidám nový sloupec pomocí .assign() a do něj uložím datum počátku výpůjčky ve formátu \"datetime\" (pouze datum bez času). Na to si vytvořím funkci \"udělej_datetime\", kterou aplikuji na sloupec pomocí .apply()\n",
    "- obdobně přidám nový sloupec do kterého pomocí nově nadefinované funkce \"dny_v_týdnu\" a strftime() vložím hodnoty 0 až 6 které reprezentují dny v týdnu. \n",
    "- vypočtu průměrný počet výpůjček na víkendový den a na pracovní den a zobrazím je v grafu pomocí .plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "id": "ab7151b0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df2 = df # nový dataframe\n",
    "df2 = df2.assign(week=9) # přidej sloupec a vlož do něj \"pracovní\" hodnotu 9\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "id": "2b9edba8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>week</th>\n",
       "      <th>started_at_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-15 08:52:05</td>\n",
       "      <td>2018-09-15 09:11:48</td>\n",
       "      <td>1182</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954728</td>\n",
       "      <td>-3.192653</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2018-09-15 09:24:33</td>\n",
       "      <td>2018-09-15 09:41:09</td>\n",
       "      <td>995</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954749</td>\n",
       "      <td>-3.192774</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2018-09-15 09:48:54</td>\n",
       "      <td>2018-09-15 10:46:40</td>\n",
       "      <td>3466</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>250</td>\n",
       "      <td>Victoria Quay</td>\n",
       "      <td>Entrance to Scottish Government Office</td>\n",
       "      <td>55.977638</td>\n",
       "      <td>-3.174116</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2018-09-16 12:01:36</td>\n",
       "      <td>2018-09-16 12:25:26</td>\n",
       "      <td>1430</td>\n",
       "      <td>255</td>\n",
       "      <td>Kings Buildings 4</td>\n",
       "      <td>X-Y Cafe</td>\n",
       "      <td>55.922001</td>\n",
       "      <td>-3.176902</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2018-09-16 12:03:43</td>\n",
       "      <td>2018-09-16 12:11:16</td>\n",
       "      <td>452</td>\n",
       "      <td>255</td>\n",
       "      <td>Kings Buildings 4</td>\n",
       "      <td>X-Y Cafe</td>\n",
       "      <td>55.922001</td>\n",
       "      <td>-3.176902</td>\n",
       "      <td>253</td>\n",
       "      <td>Kings Building 2</td>\n",
       "      <td>Sanderson Building</td>\n",
       "      <td>55.923202</td>\n",
       "      <td>-3.171646</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index           started_at             ended_at  duration  \\\n",
       "0      0  2018-09-15 08:52:05  2018-09-15 09:11:48      1182   \n",
       "1      1  2018-09-15 09:24:33  2018-09-15 09:41:09       995   \n",
       "2      2  2018-09-15 09:48:54  2018-09-15 10:46:40      3466   \n",
       "3      3  2018-09-16 12:01:36  2018-09-16 12:25:26      1430   \n",
       "4      4  2018-09-16 12:03:43  2018-09-16 12:11:16       452   \n",
       "\n",
       "   start_station_id start_station_name         start_station_description  \\\n",
       "0               247   Charlotte Square  North Corner of Charlotte Square   \n",
       "1               259   St Andrew Square                 North East corner   \n",
       "2               262         Canonmills                      near Tesco's   \n",
       "3               255  Kings Buildings 4                          X-Y Cafe   \n",
       "4               255  Kings Buildings 4                          X-Y Cafe   \n",
       "\n",
       "   start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "0               55.952335                -3.207101             259   \n",
       "1               55.954749                -3.192774             262   \n",
       "2               55.962804                -3.196284             250   \n",
       "3               55.922001                -3.176902             254   \n",
       "4               55.922001                -3.176902             253   \n",
       "\n",
       "   end_station_name                 end_station_description  \\\n",
       "0  St Andrew Square                       North East corner   \n",
       "1        Canonmills                            near Tesco's   \n",
       "2     Victoria Quay  Entrance to Scottish Government Office   \n",
       "3  Kings Building 3                    Kings Building House   \n",
       "4  Kings Building 2                      Sanderson Building   \n",
       "\n",
       "   end_station_latitude  end_station_longitude  week  started_at_date  \n",
       "0             55.954728              -3.192653     9                5  \n",
       "1             55.962804              -3.196284     9                5  \n",
       "2             55.977638              -3.174116     9                5  \n",
       "3             55.923479              -3.175385     9                5  \n",
       "4             55.923202              -3.171646     9                5  "
      ]
     },
     "execution_count": 293,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = df2.assign(started_at_date=5)\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "id": "75e05192",
   "metadata": {},
   "outputs": [],
   "source": [
    "def udelej_datetime(datum):\n",
    "    return datealias.strptime(datum, \"%Y-%m-%d %H:%M:%S\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "id": "0a92e61f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df2['started_at_date'] = df2['started_at'].apply(udelej_datetime)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "id": "d635f5d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def dny_v_tydnu(bunka):\n",
    "    return bunka.strftime(\"%w\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "id": "4fdc5269",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "df2['week'] = df2['started_at_date'].apply(dny_v_tydnu)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "id": "4df3867e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6    70865\n",
       "0    67030\n",
       "5    63339\n",
       "4    60809\n",
       "3    59605\n",
       "2    58662\n",
       "1    57949\n",
       "Name: week, dtype: int64"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_week = df2.week.value_counts() # kolik je výpůjček pro jednotlivé dny\n",
    "df_week"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0aa325c0",
   "metadata": {},
   "source": [
    "Weekend: výpůjček na den"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "id": "afc9c309",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "68947.5\n"
     ]
    }
   ],
   "source": [
    "prumer_vikend = (df_week['6'] + df_week['0']) / 2 # Takle přistupuju k těm hodnotám jako u dictionary\n",
    "print(prumer_vikend)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13a108e6",
   "metadata": {},
   "source": [
    "Dny v týdnu: výpůjček na den"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "id": "ff5d04de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60072.8\n"
     ]
    }
   ],
   "source": [
    "prumer_dny_v_tydnu = (df_week['5'] + df_week['4'] + df_week['3'] + df_week['2'] + df_week['1']) / 5\n",
    "print(prumer_dny_v_tydnu)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "id": "28e543dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "d = {'Průměr za víkendový den':prumer_vikend, 'Průměr za pracovní den':prumer_dny_v_tydnu}\n",
    "my_serie = pd.Series(d)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "id": "a6bdb2b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Počet výpůjček za víkendové dny a pracovní dny: průměr na den'}>"
      ]
     },
     "execution_count": 302,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_serie.plot.bar(title='Počet výpůjček za víkendové dny a pracovní dny: průměr na den')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0c043bb",
   "metadata": {},
   "source": [
    "Více výpůjček se děje ve dnech víkendových."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c0feb42",
   "metadata": {},
   "source": [
    "## Vývoj poptávky po půjčování kol v čase"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09cfeefd",
   "metadata": {},
   "source": [
    "POSTUP:\n",
    "- vytvořím si nový sloupec pomocí .assign() a do něj vložím data výpůjček bez časů přes nově vytvořenou funkci \"strip_date\" a funkci .apply()\n",
    "- přes .value_counts() zjistím počet výpůjček za konkrétní dny a přes .plot() zobrazím v grafu."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "id": "3be5b76f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 = df2.assign(started_at_stripped=5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "951e2f0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def strip_date(my_date): # pomocí indexů upravuju datum\n",
    "    return my_date[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "0320f4e9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>week</th>\n",
       "      <th>started_at_date</th>\n",
       "      <th>started_at_stripped</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-15 08:52:05</td>\n",
       "      <td>2018-09-15 09:11:48</td>\n",
       "      <td>1182</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954728</td>\n",
       "      <td>-3.192653</td>\n",
       "      <td>6</td>\n",
       "      <td>2018-09-15 08:52:05</td>\n",
       "      <td>2018-09-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2018-09-15 09:24:33</td>\n",
       "      <td>2018-09-15 09:41:09</td>\n",
       "      <td>995</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954749</td>\n",
       "      <td>-3.192774</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>6</td>\n",
       "      <td>2018-09-15 09:24:33</td>\n",
       "      <td>2018-09-15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index           started_at             ended_at  duration  \\\n",
       "0      0  2018-09-15 08:52:05  2018-09-15 09:11:48      1182   \n",
       "1      1  2018-09-15 09:24:33  2018-09-15 09:41:09       995   \n",
       "\n",
       "   start_station_id start_station_name         start_station_description  \\\n",
       "0               247   Charlotte Square  North Corner of Charlotte Square   \n",
       "1               259   St Andrew Square                 North East corner   \n",
       "\n",
       "   start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "0               55.952335                -3.207101             259   \n",
       "1               55.954749                -3.192774             262   \n",
       "\n",
       "   end_station_name end_station_description  end_station_latitude  \\\n",
       "0  St Andrew Square       North East corner             55.954728   \n",
       "1        Canonmills            near Tesco's             55.962804   \n",
       "\n",
       "   end_station_longitude week     started_at_date started_at_stripped  \n",
       "0              -3.192653    6 2018-09-15 08:52:05          2018-09-15  \n",
       "1              -3.196284    6 2018-09-15 09:24:33          2018-09-15  "
      ]
     },
     "execution_count": 305,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3['started_at_stripped'] = df3['started_at'].apply(strip_date)\n",
    "df3.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "b05cf5e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "vyvoj_vypujcek = df3.started_at_stripped.value_counts(sort=False) # tady je potřeba rozbít řazení dle četností pomocí sort=False\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "id": "e1bca007",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Četnost výpůjček na den')"
      ]
     },
     "execution_count": 307,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "vyvoj_vypujcek.plot(figsize = (18,4), title='Vývoj poptávky po půjčování kol')\n",
    "plt.xlabel('Čas') \n",
    "plt.ylabel('Četnost výpůjček na den')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0eb8327f",
   "metadata": {},
   "source": [
    "## Stanice, kde se kola hromadí a stanice, kde potenciálně chybí."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c363edb",
   "metadata": {},
   "source": [
    "POSTUP:\n",
    "- spočti využití koncových a počátečních stanic přes .value_counts() a hodnoty od sebe odečti. Dostaneš tak stanice, kde se kola hromadí a kde přebývají.\n",
    "- pomocí .drop([rozdil>-1].index), .dropna() a .sort_values() záznamy uspořádej"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "id": "dec12624",
   "metadata": {},
   "outputs": [],
   "source": [
    "koncove_stance_cetnost = df.end_station_id.value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "id": "8992f667",
   "metadata": {},
   "outputs": [],
   "source": [
    "pocatecni_stanice_cetnost = df.start_station_id.value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "08c5a96d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "171    -63.0\n",
       "183    167.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rozdil = pocatecni_stanice_cetnost - koncove_stance_cetnost # pokud je číslo záporné, kola se hromadí\n",
    "rozdil.head(2) "
   ]
  },
  {
   "cell_type": "raw",
   "id": "c453994d",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a8b4e0d5",
   "metadata": {},
   "source": [
    "Stanice, kde se kola hromadí:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "id": "5c390f4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "stanice_kde_se_hromadí = rozdil.drop(rozdil[rozdil>-1].index)*-1 # *-1 aby se to v grafu zobrazilo pro člověka přirozeněji\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9aafad36",
   "metadata": {},
   "source": [
    "Stanice, kde kola chybí:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "id": "0605f39b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "stanice_kde_chybi = rozdil.drop(rozdil[rozdil<1].index)*-1 # *-1 aby se to v grafu zobrazilo pro člověka přirozeněji\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "id": "735c24e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'počet kol')"
      ]
     },
     "execution_count": 313,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1368x1008 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(2,1,figsize=(19,14))\n",
    "stanice_kde_se_hromadí.dropna().sort_values().plot.bar(ax=ax1,title='Stanice, kde se kola hromadí')\n",
    "stanice_kde_chybi.dropna().sort_values(ascending=False).plot.bar(ax=ax2,title='Stanice, kde kola chybí', color=\"red\")\n",
    "ax1.set_xlabel('číslo stanice') \n",
    "ax2.set_xlabel('číslo stanice') \n",
    "ax1.set_ylabel('počet kol') \n",
    "ax2.set_ylabel('počet kol') "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64396c13",
   "metadata": {},
   "source": [
    "## Vzdálenosti mezi jednotlivými stanicemi"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fdcf501",
   "metadata": {},
   "source": [
    "POSTUP:\n",
    "- připrav si hezčí dataframe:\n",
    "    - zahoď nepotřebné sloupce přes .drop(columns=[]) a .rename(columns={})\n",
    "    - chci pouze unikátní stanice, čili zahodím duplikované řádky pomocí .drop_duplicates(subset=['station_name'])\n",
    "- a teď přichází obšlahnutej kód (nalezený na:  https://kanoki.org/2019/12/27/how-to-calculate-distance-in-python-and-pandas-using-scipy-spatial-and-distance-functions/) kterému rozumím jen rámcově. Nicméně jsem ho byl schopný poupravit a použít:) Funguje to následovně:\n",
    "    - převeď stupně na radiány pomocí np.radians() a následně změň hodnoty ve sloupcích přes .to_numpy()\n",
    "    - tohle fakt nevim co dělá: .get_metric('haversine') \n",
    "    - pomocí .pairwise() proveď výpočet pro vzdálenost každých dvou stanic a ulož to do nového dataframu\n",
    "    \n",
    " - Zajímavé je, že metoda \"kanoki\" hází trošku jiná čísla než metoda výpočtu přes geopy.distance. Rozdíl není velký. Bude tam pravděpobně důvod v nějaké odlišné konstantě nebo počtu zaokrouhlení."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea3fc4cb",
   "metadata": {},
   "source": [
    "### Příprava dat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "3a9ccd0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df2.rename(columns={\"end_station_name\":\"station_name\",\"end_station_id\":\"station_id\" })\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "id": "fc3ae6be",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_name</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>55.954728</td>\n",
       "      <td>-3.192653</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                station_name  end_station_latitude  end_station_longitude\n",
       "station_id                                                               \n",
       "259         St Andrew Square             55.954728              -3.192653"
      ]
     },
     "execution_count": 315,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stations_some = df2.drop(columns=['index','started_at','ended_at','duration','start_station_id','start_station_name','start_station_description','start_station_latitude','start_station_longitude','end_station_description','week','started_at_date']).set_index('station_id')\n",
    "df_stations_some.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b612af5",
   "metadata": {},
   "source": [
    "Date frame s názvy a polohou unikátních stanic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "id": "06814676",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_name</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>55.954728</td>\n",
       "      <td>-3.192653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>Canonmills</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                station_name   latitude  longitude\n",
       "station_id                                        \n",
       "259         St Andrew Square  55.954728  -3.192653\n",
       "262               Canonmills  55.962804  -3.196284"
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stations = df_stations_some.drop_duplicates(subset=['station_name']) # zahoď duplikovaný řádky\n",
    "df_stations = df_stations.rename(columns={\"end_station_latitude\":\"latitude\",\"end_station_longitude\":\"longitude\"})\n",
    "df_stations.head(2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ea7a8bf",
   "metadata": {},
   "source": [
    "### Vzdálenost ala kanoki.org"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cfbeae9",
   "metadata": {},
   "source": [
    "Jen si tohle poupravím: https://kanoki.org/2019/12/27/how-to-calculate-distance-in-python-and-pandas-using-scipy-spatial-and-distance-functions/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "2251d8b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_stations['latitude'] = np.radians(df_stations['latitude'])\n",
    "df_stations['longitude'] = np.radians(df_stations['latitude'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "d07930fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "dist = DistanceMetric.get_metric('haversine') # tomuhle nerozumim co to dělá"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "id": "14625ee4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.97659423, 0.01704478],\n",
       "       [0.97673519, 0.01704724],\n",
       "       [0.97699409, 0.01705176],\n",
       "       [0.97604883, 0.01703527],\n",
       "       [0.97604401, 0.01703518],\n",
       "       [0.97606117, 0.01703548],\n",
       "       [0.97633655, 0.01704029],\n",
       "       [0.97631973, 0.01703999],\n",
       "       [0.97633386, 0.01704024],\n",
       "       [0.97644198, 0.01704213],\n",
       "       [0.97666121, 0.01704595],\n",
       "       [0.97651362, 0.01704338],\n",
       "       [0.97663396, 0.01704548],\n",
       "       [0.97638171, 0.01704108],\n",
       "       [0.97639101, 0.01704124],\n",
       "       [0.97655248, 0.01704406],\n",
       "       [0.97653518, 0.01704375],\n",
       "       [0.97639577, 0.01704132],\n",
       "       [0.97670248, 0.01704667],\n",
       "       [0.97655781, 0.01704415],\n",
       "       [0.97654199, 0.01704387],\n",
       "       [0.97602304, 0.01703482],\n",
       "       [0.97656694, 0.01704431],\n",
       "       [0.97642046, 0.01704175],\n",
       "       [0.97693491, 0.01705073],\n",
       "       [0.9769022 , 0.01705016],\n",
       "       [0.97673053, 0.01704716],\n",
       "       [0.97642724, 0.01704187],\n",
       "       [0.9766776 , 0.01704624],\n",
       "       [0.97684679, 0.01704919],\n",
       "       [0.97705776, 0.01705287],\n",
       "       [0.97653791, 0.0170438 ],\n",
       "       [0.97628759, 0.01703943],\n",
       "       [0.9769027 , 0.01705017],\n",
       "       [0.97606308, 0.01703551],\n",
       "       [0.97645528, 0.01704236],\n",
       "       [0.97642214, 0.01704178],\n",
       "       [0.97630861, 0.0170398 ],\n",
       "       [0.97634578, 0.01704045],\n",
       "       [0.97633246, 0.01704022],\n",
       "       [0.9763678 , 0.01704083],\n",
       "       [0.97638456, 0.01704113],\n",
       "       [0.97627311, 0.01703918],\n",
       "       [0.97675598, 0.01704761],\n",
       "       [0.97677421, 0.01704793],\n",
       "       [0.97668526, 0.01704637],\n",
       "       [0.97627431, 0.0170392 ],\n",
       "       [0.97688293, 0.01704982],\n",
       "       [0.9767586 , 0.01704765],\n",
       "       [0.97612749, 0.01703664],\n",
       "       [0.97634243, 0.01704039],\n",
       "       [0.97625629, 0.01703889],\n",
       "       [0.97660043, 0.01704489],\n",
       "       [0.97623307, 0.01703848],\n",
       "       [0.97642264, 0.01704179],\n",
       "       [0.97627487, 0.01703921],\n",
       "       [0.97696423, 0.01705124],\n",
       "       [0.97696412, 0.01705124],\n",
       "       [0.93192773, 0.01626521],\n",
       "       [0.97687307, 0.01704965],\n",
       "       [0.97674661, 0.01704744],\n",
       "       [0.97634326, 0.0170404 ],\n",
       "       [0.97670273, 0.01704668],\n",
       "       [0.97664791, 0.01704572],\n",
       "       [0.97664978, 0.01704575],\n",
       "       [0.97703573, 0.01705249],\n",
       "       [0.97669079, 0.01704647],\n",
       "       [0.9763027 , 0.0170397 ],\n",
       "       [0.9766759 , 0.01704621],\n",
       "       [0.97631864, 0.01703997],\n",
       "       [0.97642008, 0.01704175],\n",
       "       [0.97644265, 0.01704214],\n",
       "       [0.97641513, 0.01704166],\n",
       "       [0.9763676 , 0.01704083],\n",
       "       [0.9767129 , 0.01704686],\n",
       "       [0.9764119 , 0.0170416 ],\n",
       "       [0.97638858, 0.0170412 ],\n",
       "       [0.97644752, 0.01704222],\n",
       "       [0.97643508, 0.01704201],\n",
       "       [0.97662723, 0.01704536],\n",
       "       [0.97637596, 0.01704098],\n",
       "       [0.97637133, 0.01704089],\n",
       "       [0.97685261, 0.01704929],\n",
       "       [0.97642038, 0.01704175],\n",
       "       [0.97638511, 0.01704113],\n",
       "       [0.97675666, 0.01704762],\n",
       "       [0.97672965, 0.01704715],\n",
       "       [0.976591  , 0.01704473],\n",
       "       [0.97637845, 0.01704102],\n",
       "       [0.97640459, 0.01704147],\n",
       "       [0.97630598, 0.01703975],\n",
       "       [0.97654337, 0.0170439 ],\n",
       "       [0.97611053, 0.01703634],\n",
       "       [0.97643234, 0.01704196],\n",
       "       [0.97664773, 0.01704572],\n",
       "       [0.97632131, 0.01704002],\n",
       "       [0.97634862, 0.0170405 ],\n",
       "       [0.97635301, 0.01704057],\n",
       "       [0.97636748, 0.01704083],\n",
       "       [0.97650633, 0.01704325],\n",
       "       [0.97646105, 0.01704246],\n",
       "       [0.97634133, 0.01704037],\n",
       "       [0.97628759, 0.01703943],\n",
       "       [0.97695575, 0.01705109],\n",
       "       [0.97648268, 0.01704284],\n",
       "       [0.97651237, 0.01704336],\n",
       "       [0.97634862, 0.0170405 ],\n",
       "       [0.97640361, 0.01704146],\n",
       "       [0.97653534, 0.01704376],\n",
       "       [0.97619642, 0.01703784],\n",
       "       [0.9765578 , 0.01704415],\n",
       "       [0.97643234, 0.01704196],\n",
       "       [0.9764665 , 0.01704256],\n",
       "       [0.97640789, 0.01704153],\n",
       "       [0.97606603, 0.01703557],\n",
       "       [0.97610444, 0.01703624],\n",
       "       [0.97670248, 0.01704667],\n",
       "       [0.97623896, 0.01703858],\n",
       "       [0.97648047, 0.0170428 ],\n",
       "       [0.97650403, 0.01704321],\n",
       "       [0.97654616, 0.01704395],\n",
       "       [0.9763368 , 0.01704029],\n",
       "       [0.97643461, 0.017042  ],\n",
       "       [0.97578573, 0.01703067],\n",
       "       [0.97579281, 0.0170308 ],\n",
       "       [0.97645312, 0.01704232],\n",
       "       [0.97664987, 0.01704576],\n",
       "       [0.9767566 , 0.01704762],\n",
       "       [0.97690153, 0.01705015],\n",
       "       [0.97646925, 0.0170426 ],\n",
       "       [0.97635265, 0.01704057],\n",
       "       [0.9767545 , 0.01704758],\n",
       "       [0.97669288, 0.01704651],\n",
       "       [0.97663874, 0.01704556],\n",
       "       [0.97599915, 0.0170344 ],\n",
       "       [0.97673236, 0.0170472 ],\n",
       "       [0.97667816, 0.01704625],\n",
       "       [0.97612053, 0.01703652],\n",
       "       [0.97674653, 0.01704744],\n",
       "       [0.97644302, 0.01704215],\n",
       "       [0.97628697, 0.01703942],\n",
       "       [0.97631871, 0.01703998],\n",
       "       [0.97642525, 0.01704184],\n",
       "       [0.97649338, 0.01704302],\n",
       "       [0.97646984, 0.01704261],\n",
       "       [0.97631522, 0.01703992],\n",
       "       [0.97612457, 0.01703659],\n",
       "       [0.97660331, 0.01704494],\n",
       "       [0.97653073, 0.01704368],\n",
       "       [0.97578589, 0.01703068],\n",
       "       [0.97684353, 0.01704914],\n",
       "       [0.97653954, 0.01704383],\n",
       "       [0.97611697, 0.01703646],\n",
       "       [0.97633843, 0.01704032],\n",
       "       [0.9772081 , 0.0170555 ],\n",
       "       [0.9770808 , 0.01705328],\n",
       "       [0.97721303, 0.01705558],\n",
       "       [0.97717046, 0.01705484],\n",
       "       [0.97715332, 0.01705454],\n",
       "       [0.97721909, 0.01705569],\n",
       "       [0.9763161 , 0.01703993],\n",
       "       [0.97726146, 0.01705643],\n",
       "       [0.97710105, 0.01705363],\n",
       "       [0.97705464, 0.01705282],\n",
       "       [0.97618305, 0.01703761],\n",
       "       [0.97682445, 0.0170488 ],\n",
       "       [0.97640491, 0.01704148],\n",
       "       [0.97640715, 0.01704152],\n",
       "       [0.97662578, 0.01704534],\n",
       "       [0.97662578, 0.01704534]])"
      ]
     },
     "execution_count": 319,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stations[['latitude','longitude']].to_numpy() # v radiánech"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "id": "3dfee871",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.        , 0.89836818, 2.54839687, ..., 1.1923093 , 0.20105223,\n",
       "        0.20105223],\n",
       "       [0.89836818, 0.        , 1.65002869, ..., 2.09067748, 0.69731595,\n",
       "        0.69731595],\n",
       "       [2.54839687, 1.65002869, 0.        , ..., 3.74070617, 2.34734464,\n",
       "        2.34734464],\n",
       "       ...,\n",
       "       [1.1923093 , 2.09067748, 3.74070617, ..., 0.        , 1.39336153,\n",
       "        1.39336153],\n",
       "       [0.20105223, 0.69731595, 2.34734464, ..., 1.39336153, 0.        ,\n",
       "        0.        ],\n",
       "       [0.20105223, 0.69731595, 2.34734464, ..., 1.39336153, 0.        ,\n",
       "        0.        ]])"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist.pairwise(df_stations[['latitude','longitude']].to_numpy())*6373 # výpočet \"každá s každou\" a krát poloměr Země (tahle konstata se uvádí v různých hodnotách)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "id": "7e0654a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>St Andrew Square</th>\n",
       "      <th>Canonmills</th>\n",
       "      <th>Victoria Quay</th>\n",
       "      <th>Kings Building 3</th>\n",
       "      <th>Kings Building 2</th>\n",
       "      <th>Kings Buildings 1</th>\n",
       "      <th>Pollock Halls</th>\n",
       "      <th>Royal Commonwealth Pool</th>\n",
       "      <th>Meadows East</th>\n",
       "      <th>Bristo Square</th>\n",
       "      <th>...</th>\n",
       "      <th>Ingliston Park &amp; Ride</th>\n",
       "      <th>Port Edgar Marina</th>\n",
       "      <th>Tesco Ferrymuir</th>\n",
       "      <th>Scotstoun House</th>\n",
       "      <th>Edinburgh Park Central</th>\n",
       "      <th>Leith Walk North</th>\n",
       "      <th>Musselburgh Lidl</th>\n",
       "      <th>Musselburgh Brunton Hall</th>\n",
       "      <th>Picady Place</th>\n",
       "      <th>Picardy Place</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>St Andrew Square</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.898368</td>\n",
       "      <td>2.548397</td>\n",
       "      <td>3.475985</td>\n",
       "      <td>3.506759</td>\n",
       "      <td>3.397386</td>\n",
       "      <td>1.642311</td>\n",
       "      <td>1.749455</td>\n",
       "      <td>1.659442</td>\n",
       "      <td>0.970371</td>\n",
       "      <td>...</td>\n",
       "      <td>1.772626</td>\n",
       "      <td>4.252461</td>\n",
       "      <td>3.230090</td>\n",
       "      <td>2.934324</td>\n",
       "      <td>2.620597</td>\n",
       "      <td>1.467223</td>\n",
       "      <td>1.206620</td>\n",
       "      <td>1.192309</td>\n",
       "      <td>0.201052</td>\n",
       "      <td>0.201052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canonmills</th>\n",
       "      <td>0.898368</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.650029</td>\n",
       "      <td>4.374353</td>\n",
       "      <td>4.405127</td>\n",
       "      <td>4.295755</td>\n",
       "      <td>2.540679</td>\n",
       "      <td>2.647824</td>\n",
       "      <td>2.557810</td>\n",
       "      <td>1.868739</td>\n",
       "      <td>...</td>\n",
       "      <td>2.670994</td>\n",
       "      <td>3.354093</td>\n",
       "      <td>2.331722</td>\n",
       "      <td>2.035956</td>\n",
       "      <td>3.518965</td>\n",
       "      <td>0.568855</td>\n",
       "      <td>2.104988</td>\n",
       "      <td>2.090677</td>\n",
       "      <td>0.697316</td>\n",
       "      <td>0.697316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Victoria Quay</th>\n",
       "      <td>2.548397</td>\n",
       "      <td>1.650029</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.024382</td>\n",
       "      <td>6.055155</td>\n",
       "      <td>5.945783</td>\n",
       "      <td>4.190708</td>\n",
       "      <td>4.297852</td>\n",
       "      <td>4.207839</td>\n",
       "      <td>3.518768</td>\n",
       "      <td>...</td>\n",
       "      <td>4.321023</td>\n",
       "      <td>1.704064</td>\n",
       "      <td>0.681693</td>\n",
       "      <td>0.385927</td>\n",
       "      <td>5.168994</td>\n",
       "      <td>1.081174</td>\n",
       "      <td>3.755017</td>\n",
       "      <td>3.740706</td>\n",
       "      <td>2.347345</td>\n",
       "      <td>2.347345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kings Building 3</th>\n",
       "      <td>3.475985</td>\n",
       "      <td>4.374353</td>\n",
       "      <td>6.024382</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.030774</td>\n",
       "      <td>0.078599</td>\n",
       "      <td>1.833674</td>\n",
       "      <td>1.726530</td>\n",
       "      <td>1.816543</td>\n",
       "      <td>2.505614</td>\n",
       "      <td>...</td>\n",
       "      <td>1.703359</td>\n",
       "      <td>7.728446</td>\n",
       "      <td>6.706075</td>\n",
       "      <td>6.410309</td>\n",
       "      <td>0.855388</td>\n",
       "      <td>4.943208</td>\n",
       "      <td>2.269365</td>\n",
       "      <td>2.283676</td>\n",
       "      <td>3.677037</td>\n",
       "      <td>3.677037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kings Building 2</th>\n",
       "      <td>3.506759</td>\n",
       "      <td>4.405127</td>\n",
       "      <td>6.055155</td>\n",
       "      <td>0.030774</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.109372</td>\n",
       "      <td>1.864447</td>\n",
       "      <td>1.757303</td>\n",
       "      <td>1.847317</td>\n",
       "      <td>2.536388</td>\n",
       "      <td>...</td>\n",
       "      <td>1.734133</td>\n",
       "      <td>7.759220</td>\n",
       "      <td>6.736849</td>\n",
       "      <td>6.441083</td>\n",
       "      <td>0.886162</td>\n",
       "      <td>4.973981</td>\n",
       "      <td>2.300138</td>\n",
       "      <td>2.314449</td>\n",
       "      <td>3.707811</td>\n",
       "      <td>3.707811</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 170 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  St Andrew Square  Canonmills  Victoria Quay  \\\n",
       "St Andrew Square          0.000000    0.898368       2.548397   \n",
       "Canonmills                0.898368    0.000000       1.650029   \n",
       "Victoria Quay             2.548397    1.650029       0.000000   \n",
       "Kings Building 3          3.475985    4.374353       6.024382   \n",
       "Kings Building 2          3.506759    4.405127       6.055155   \n",
       "\n",
       "                  Kings Building 3  Kings Building 2  Kings Buildings 1  \\\n",
       "St Andrew Square          3.475985          3.506759           3.397386   \n",
       "Canonmills                4.374353          4.405127           4.295755   \n",
       "Victoria Quay             6.024382          6.055155           5.945783   \n",
       "Kings Building 3          0.000000          0.030774           0.078599   \n",
       "Kings Building 2          0.030774          0.000000           0.109372   \n",
       "\n",
       "                  Pollock Halls  Royal Commonwealth Pool  Meadows East  \\\n",
       "St Andrew Square       1.642311                 1.749455      1.659442   \n",
       "Canonmills             2.540679                 2.647824      2.557810   \n",
       "Victoria Quay          4.190708                 4.297852      4.207839   \n",
       "Kings Building 3       1.833674                 1.726530      1.816543   \n",
       "Kings Building 2       1.864447                 1.757303      1.847317   \n",
       "\n",
       "                  Bristo Square  ...  Ingliston Park & Ride  \\\n",
       "St Andrew Square       0.970371  ...               1.772626   \n",
       "Canonmills             1.868739  ...               2.670994   \n",
       "Victoria Quay          3.518768  ...               4.321023   \n",
       "Kings Building 3       2.505614  ...               1.703359   \n",
       "Kings Building 2       2.536388  ...               1.734133   \n",
       "\n",
       "                  Port Edgar Marina  Tesco Ferrymuir  Scotstoun House  \\\n",
       "St Andrew Square           4.252461         3.230090         2.934324   \n",
       "Canonmills                 3.354093         2.331722         2.035956   \n",
       "Victoria Quay              1.704064         0.681693         0.385927   \n",
       "Kings Building 3           7.728446         6.706075         6.410309   \n",
       "Kings Building 2           7.759220         6.736849         6.441083   \n",
       "\n",
       "                  Edinburgh Park Central  Leith Walk North  Musselburgh Lidl  \\\n",
       "St Andrew Square                2.620597          1.467223          1.206620   \n",
       "Canonmills                      3.518965          0.568855          2.104988   \n",
       "Victoria Quay                   5.168994          1.081174          3.755017   \n",
       "Kings Building 3                0.855388          4.943208          2.269365   \n",
       "Kings Building 2                0.886162          4.973981          2.300138   \n",
       "\n",
       "                  Musselburgh Brunton Hall  Picady Place  Picardy Place  \n",
       "St Andrew Square                  1.192309      0.201052       0.201052  \n",
       "Canonmills                        2.090677      0.697316       0.697316  \n",
       "Victoria Quay                     3.740706      2.347345       2.347345  \n",
       "Kings Building 3                  2.283676      3.677037       3.677037  \n",
       "Kings Building 2                  2.314449      3.707811       3.707811  \n",
       "\n",
       "[5 rows x 170 columns]"
      ]
     },
     "execution_count": 321,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stations_result = pd.DataFrame(dist.pairwise(df_stations[['latitude','longitude']].to_numpy())*6373,  columns=df_stations.station_name.unique(), index=df_stations.station_name.unique())\n",
    "df_stations_result.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3880d4c3",
   "metadata": {},
   "source": [
    "NOTE: hází to trošku jiný čísla než výpočet pomocí geopy.distance ... odlišnost v nějaké konstantě? (*6373 se tak nabízí), počtu zaokrouhlení? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "id": "73cda5cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.801199956151658\n"
     ]
    }
   ],
   "source": [
    "Victoria_Quay = (55.977638, -3.174116) # jen pro porovnání dvou metod\n",
    "St_Andrew_Square = (55.954728, -3.192653)\n",
    "a = distance.distance(Victoria_Quay, St_Andrew_Square)\n",
    "print(a.km)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da8d9f84",
   "metadata": {},
   "source": [
    "## Jaký má vliv počasí na poptávku po kolech?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53c372e5",
   "metadata": {},
   "source": [
    "POSTUP:\n",
    "- synchronizuj data v obou tabulkách z hlediska začátku a konce časové řady\n",
    "- uprav si data v tabulce s počasím:\n",
    "    - odstraň texty (mm, °c atd) ve sloupcích přes nově vytvořené funkce (např. \"zmiz_st_C\") a přes .apply()\n",
    "    - čísla hodnot konvertuj ze strigu na integer / float přes nově vytvořené funkce (např. \"string_to_int\") a přes .apply() \n",
    "- sestav si dataframe s daty pro jeden den:\n",
    "    - u teploty a větru beru data pro 12:00 (tady by se dalo ještě dál hrát s průměry za každý den) přes .query(\"podmínka\")\n",
    "    - u deště beru součet za daný den (a tak jsem tahle data spracoval zvlášť a připojil je až později)\n",
    "    - přes .drop(columns) zahoď nepotřebné sloupce\n",
    "- u data framu s koly zjisti počet výpůjček pro jednotlivý den přes .value_counts(sort=False)\n",
    "- u obou data framů nastav datum do indexu ať porovnáváme porovnatelné přes .set_index('date')\n",
    "- přes .join spoj dataframy s počasím a s koly\n",
    "- přes .plot.scatter() zobraz grafy a přes .corr() spočítej korelace\n",
    "- interpretuj výsledky"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7258bf21",
   "metadata": {},
   "source": [
    "Ty dvě tabulky nemají stejný časový rozpětí. Kola jsou od 15-09-2018 do 30-06-2021. Počasí je od 01-09-2018 do 31-10-2020. Čili průnik máme od 15-9-2018 do 31-10-2020."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "id": "bfd5a92b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def udelej_datetime2(datum): # funkce na vytvoření datetime objektu\n",
    "    return datealias.strptime(datum, \"%Y-%m-%d\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "afc72e6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def zmiz_st_C(bunka): # tohle zmizí [°c] ve sloupci\n",
    "    return bunka.replace('°c','')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "id": "a8ee3584",
   "metadata": {},
   "outputs": [],
   "source": [
    "def zmiz_mm(bunka): # tohle zmizí [mm] ve sloupci\n",
    "    return bunka.replace('mm','')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "id": "de28a227",
   "metadata": {},
   "outputs": [],
   "source": [
    "def zmiz_kmzah(bunka): # tohle zmizí [km/h] ve sloupci\n",
    "    return bunka.replace('km/h','')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "id": "d0c2b434",
   "metadata": {},
   "outputs": [],
   "source": [
    "def string_to_int(bunka): # string na integer\n",
    "    return int(bunka)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "id": "1338bc41",
   "metadata": {},
   "outputs": [],
   "source": [
    "def string_to_float(bunka): # string na float\n",
    "    return float (bunka)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "id": "89f6950b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_weather = df_weather.assign(date_as_datetime=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "id": "1d9ddf37",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_weather['date_as_datetime'] = df_weather['date'].apply(udelej_datetime2) # udělej v bunkách sloupce datetime objekt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "id": "e60857d4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>wind</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain</th>\n",
       "      <th>humidity</th>\n",
       "      <th>cloud</th>\n",
       "      <th>pressure</th>\n",
       "      <th>vis</th>\n",
       "      <th>date</th>\n",
       "      <th>date_as_datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00:00</td>\n",
       "      <td>11 °c</td>\n",
       "      <td>11 °c</td>\n",
       "      <td>9 km/h from S</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>79%</td>\n",
       "      <td>13%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-01</td>\n",
       "      <td>2018-09-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    time   temp  feels           wind     gust    rain humidity cloud  \\\n",
       "0  00:00  11 °c  11 °c  9 km/h from S  19 km/h  0.0 mm      79%   13%   \n",
       "\n",
       "  pressure        vis        date date_as_datetime  \n",
       "0  1020 mb  Excellent  2018-09-01       2018-09-01  "
      ]
     },
     "execution_count": 331,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_weather.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3cdcb82",
   "metadata": {},
   "source": [
    "## Teplota a poryvy větru "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d99f66a",
   "metadata": {},
   "source": [
    "Vyber relevantní data z weather a ulož je do novýho dataframu. Beru počasí pro každý den ve 12:00."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "id": "05d5e697",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>wind</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain</th>\n",
       "      <th>humidity</th>\n",
       "      <th>cloud</th>\n",
       "      <th>pressure</th>\n",
       "      <th>vis</th>\n",
       "      <th>date</th>\n",
       "      <th>date_as_datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>12:00</td>\n",
       "      <td>14 °c</td>\n",
       "      <td>12 °c</td>\n",
       "      <td>17 km/h from SW</td>\n",
       "      <td>21 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>65%</td>\n",
       "      <td>43%</td>\n",
       "      <td>1019 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>12:00</td>\n",
       "      <td>14 °c</td>\n",
       "      <td>11 °c</td>\n",
       "      <td>32 km/h from WSW</td>\n",
       "      <td>47 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>71%</td>\n",
       "      <td>92%</td>\n",
       "      <td>1008 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      time   temp  feels              wind     gust    rain humidity cloud  \\\n",
       "116  12:00  14 °c  12 °c   17 km/h from SW  21 km/h  0.0 mm      65%   43%   \n",
       "124  12:00  14 °c  11 °c  32 km/h from WSW  47 km/h  0.0 mm      71%   92%   \n",
       "\n",
       "    pressure        vis        date date_as_datetime  \n",
       "116  1019 mb  Excellent  2018-09-15       2018-09-15  \n",
       "124  1008 mb  Excellent  2018-09-16       2018-09-16  "
      ]
     },
     "execution_count": 332,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_weather_to_compare = df_weather.query(\"date > '2018-09-14' and time == '12:00'\")\n",
    "df_weather_to_compare.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8dba4dd1",
   "metadata": {},
   "source": [
    "Vyjeď si jen datum, teploty a poryvy větru pro 12:00. # přes .drop zahoď sloupce. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "id": "c492212a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>gust</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>14 °c</td>\n",
       "      <td>12 °c</td>\n",
       "      <td>21 km/h</td>\n",
       "      <td>2018-09-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>14 °c</td>\n",
       "      <td>11 °c</td>\n",
       "      <td>47 km/h</td>\n",
       "      <td>2018-09-16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      temp  feels     gust        date\n",
       "116  14 °c  12 °c  21 km/h  2018-09-15\n",
       "124  14 °c  11 °c  47 km/h  2018-09-16"
      ]
     },
     "execution_count": 333,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_weather_temp = df_weather_to_compare.drop(columns=['time','wind','rain','humidity','cloud','pressure','vis','date_as_datetime'])\n",
    "df_weather_temp.head(2)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b25a9c0",
   "metadata": {},
   "source": [
    "Zmiz [°c], [mm] a [km/h] ve sloupcích."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "id": "a2cecf92",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "df_weather_temp['temp'] = df_weather_temp['temp'].apply(zmiz_st_C)\n",
    "df_weather_temp['feels'] = df_weather_temp['feels'].apply(zmiz_st_C)\n",
    "df_weather_temp['gust'] = df_weather_temp['gust'].apply(zmiz_kmzah)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "403c0bf8",
   "metadata": {},
   "source": [
    "Změň string na integer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "id": "298b7215",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>gust</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>21</td>\n",
       "      <td>2018-09-15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     temp  feels  gust        date\n",
       "116    14     12    21  2018-09-15"
      ]
     },
     "execution_count": 335,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_weather_temp['temp'] = df_weather_temp['temp'].apply(string_to_int)\n",
    "df_weather_temp['feels'] = df_weather_temp['feels'].apply(string_to_int)\n",
    "df_weather_temp['gust'] = df_weather_temp['gust'].apply(string_to_int)\n",
    "df_weather_temp.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ada2070",
   "metadata": {},
   "source": [
    "Vyber relevantní data z kol a ulož je do novýho dataframu. Potřebuju sloupec s daty výpůjček bez časů."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "id": "c6a8003e",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>week</th>\n",
       "      <th>started_at_date</th>\n",
       "      <th>started_at_stripped</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-15 08:52:05</td>\n",
       "      <td>2018-09-15 09:11:48</td>\n",
       "      <td>1182</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954728</td>\n",
       "      <td>-3.192653</td>\n",
       "      <td>6</td>\n",
       "      <td>2018-09-15 08:52:05</td>\n",
       "      <td>2018-09-15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index           started_at             ended_at  duration  \\\n",
       "0      0  2018-09-15 08:52:05  2018-09-15 09:11:48      1182   \n",
       "\n",
       "   start_station_id start_station_name         start_station_description  \\\n",
       "0               247   Charlotte Square  North Corner of Charlotte Square   \n",
       "\n",
       "   start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "0               55.952335                -3.207101             259   \n",
       "\n",
       "   end_station_name end_station_description  end_station_latitude  \\\n",
       "0  St Andrew Square       North East corner             55.954728   \n",
       "\n",
       "   end_station_longitude week     started_at_date started_at_stripped  \n",
       "0              -3.192653    6 2018-09-15 08:52:05          2018-09-15  "
      ]
     },
     "execution_count": 336,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_bikes_to_compare = df3.query(\"started_at < '2020-11-01' \")\n",
    "df_bikes_to_compare.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37af49c7",
   "metadata": {},
   "source": [
    "Spočítej počet výpůjček na den, řaď dle dní."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "id": "4ecbdda1",
   "metadata": {},
   "outputs": [],
   "source": [
    "bike_counts = df_bikes_to_compare.started_at_stripped.value_counts(sort=False)  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81dcec47",
   "metadata": {},
   "source": [
    "Spoj tabulky"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "id": "c6368c72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>gust</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>21</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            temp  feels  gust  count\n",
       "date                                \n",
       "2018-09-15    14     12    21      3"
      ]
     },
     "execution_count": 338,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_weather_temp2 = df_weather_temp.set_index('date') # nastav index na datum\n",
    "df_to_graf = (df_weather_temp2.join(bike_counts)) \n",
    "df_to_graf = df_to_graf.rename(columns={\"started_at_stripped\":\"count\"})\n",
    "df_to_graf.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5df55c4e",
   "metadata": {},
   "source": [
    "## Déšť"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "id": "03251f54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>wind</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain</th>\n",
       "      <th>humidity</th>\n",
       "      <th>cloud</th>\n",
       "      <th>pressure</th>\n",
       "      <th>vis</th>\n",
       "      <th>date</th>\n",
       "      <th>date_as_datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00:00</td>\n",
       "      <td>11 °c</td>\n",
       "      <td>11 °c</td>\n",
       "      <td>9 km/h from S</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>79%</td>\n",
       "      <td>13%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-01</td>\n",
       "      <td>2018-09-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    time   temp  feels           wind     gust    rain humidity cloud  \\\n",
       "0  00:00  11 °c  11 °c  9 km/h from S  19 km/h  0.0 mm      79%   13%   \n",
       "\n",
       "  pressure        vis        date date_as_datetime  \n",
       "0  1020 mb  Excellent  2018-09-01       2018-09-01  "
      ]
     },
     "execution_count": 339,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_weather.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d69fa9a3",
   "metadata": {},
   "source": [
    "Vyber relevantní data z weather pro rain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "id": "f1d29e14",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>wind</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain</th>\n",
       "      <th>humidity</th>\n",
       "      <th>cloud</th>\n",
       "      <th>pressure</th>\n",
       "      <th>vis</th>\n",
       "      <th>date</th>\n",
       "      <th>date_as_datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>00:00</td>\n",
       "      <td>7 °c</td>\n",
       "      <td>4 °c</td>\n",
       "      <td>14 km/h from WSW</td>\n",
       "      <td>26 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>92%</td>\n",
       "      <td>14%</td>\n",
       "      <td>1016 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      time  temp feels              wind     gust    rain humidity cloud  \\\n",
       "112  00:00  7 °c  4 °c  14 km/h from WSW  26 km/h  0.0 mm      92%   14%   \n",
       "\n",
       "    pressure        vis        date date_as_datetime  \n",
       "112  1016 mb  Excellent  2018-09-15       2018-09-15  "
      ]
     },
     "execution_count": 340,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_rain = df_weather.query(\"date > '2018-09-14'\")\n",
    "df_rain.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "id": "e3006776",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MATJ~1\\AppData\\Local\\Temp/ipykernel_14512/3397428080.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_rain['rain'] = df_rain['rain'].apply(zmiz_mm) # házi warning: nevím proč, ale pracuje to\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>wind</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain</th>\n",
       "      <th>humidity</th>\n",
       "      <th>cloud</th>\n",
       "      <th>pressure</th>\n",
       "      <th>vis</th>\n",
       "      <th>date</th>\n",
       "      <th>date_as_datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>00:00</td>\n",
       "      <td>7 °c</td>\n",
       "      <td>4 °c</td>\n",
       "      <td>14 km/h from WSW</td>\n",
       "      <td>26 km/h</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92%</td>\n",
       "      <td>14%</td>\n",
       "      <td>1016 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      time  temp feels              wind     gust  rain humidity cloud  \\\n",
       "112  00:00  7 °c  4 °c  14 km/h from WSW  26 km/h  0.0       92%   14%   \n",
       "\n",
       "    pressure        vis        date date_as_datetime  \n",
       "112  1016 mb  Excellent  2018-09-15       2018-09-15  "
      ]
     },
     "execution_count": 341,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_rain['rain'] = df_rain['rain'].apply(zmiz_mm) # házi warning: nevím proč, ale pracuje to\n",
    "df_rain.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "id": "2775106f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MATJ~1\\AppData\\Local\\Temp/ipykernel_14512/571964669.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_rain['rain'] = df_rain['rain'].apply(string_to_float) # házi warning: nevím proč, ale pracuje to\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>wind</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain</th>\n",
       "      <th>humidity</th>\n",
       "      <th>cloud</th>\n",
       "      <th>pressure</th>\n",
       "      <th>vis</th>\n",
       "      <th>date</th>\n",
       "      <th>date_as_datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>00:00</td>\n",
       "      <td>7 °c</td>\n",
       "      <td>4 °c</td>\n",
       "      <td>14 km/h from WSW</td>\n",
       "      <td>26 km/h</td>\n",
       "      <td>0.0</td>\n",
       "      <td>92%</td>\n",
       "      <td>14%</td>\n",
       "      <td>1016 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      time  temp feels              wind     gust  rain humidity cloud  \\\n",
       "112  00:00  7 °c  4 °c  14 km/h from WSW  26 km/h   0.0      92%   14%   \n",
       "\n",
       "    pressure        vis        date date_as_datetime  \n",
       "112  1016 mb  Excellent  2018-09-15       2018-09-15  "
      ]
     },
     "execution_count": 342,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_rain['rain'] = df_rain['rain'].apply(string_to_float) # házi warning: nevím proč, ale pracuje to\n",
    "df_rain.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "id": "5004a403",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rain</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            rain\n",
       "date            \n",
       "2018-09-15   1.0"
      ]
     },
     "execution_count": 343,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_rain_sumed = df_rain.groupby(['date']).sum() # seskupinkuj podle konkrétních datumů, možno chápat jako: \"where == unikátní datum\"\n",
    "df_rain_sumed.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "id": "5f9c36a0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>gust</th>\n",
       "      <th>count</th>\n",
       "      <th>rain</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>21</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            temp  feels  gust  count  rain\n",
       "date                                      \n",
       "2018-09-15    14     12    21      3   1.0"
      ]
     },
     "execution_count": 344,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_to_graf2 = (df_to_graf.join(df_rain_sumed)) \n",
    "df_to_graf2.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "id": "93c01628",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'četnost výpůjček')"
      ]
     },
     "execution_count": 345,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(1,2, figsize=(12,4))\n",
    "df_to_graf2.plot.scatter('temp','count',ax=ax1, title=\"Vztah teploty a počtu výpůjček\")\n",
    "df_to_graf2.plot.scatter('temp','count',ax=ax2, title=\"Vztah pocitové teploty a počtu výpůjček\")\n",
    "ax1.set_xlabel('teplota °c') \n",
    "ax2.set_xlabel('pocitová teplota °c') \n",
    "ax1.set_ylabel('četnost výpůjček') \n",
    "ax2.set_ylabel('četnost výpůjček')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 346,
   "id": "4ba58a77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'četnost výpůjček')"
      ]
     },
     "execution_count": 346,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(1,2, figsize=(12,4))\n",
    "df_to_graf2.plot.scatter('gust','count',ax=ax1, title=\"Vztah rychlosti větru v poryvech a počtu výpůjček\")\n",
    "df_to_graf2.plot.scatter('rain','count',ax=ax2, title=\"Vztah úrhnu srážek a počtu výpůjček\")  \n",
    "ax1.set_xlabel('rychlost větru v poryvech km/h') \n",
    "ax2.set_xlabel('úhrn srážek mm') \n",
    "ax1.set_ylabel('četnost výpůjček') \n",
    "ax2.set_ylabel('četnost výpůjček') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3fdff027",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a0591ed2",
   "metadata": {},
   "source": [
    "Spočítej korelační koeficienty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 347,
   "id": "45eba395",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>gust</th>\n",
       "      <th>count</th>\n",
       "      <th>rain</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>temp</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.981014</td>\n",
       "      <td>-0.136722</td>\n",
       "      <td>0.575814</td>\n",
       "      <td>0.080158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>feels</th>\n",
       "      <td>0.981014</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.283151</td>\n",
       "      <td>0.582458</td>\n",
       "      <td>0.039237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gust</th>\n",
       "      <td>-0.136722</td>\n",
       "      <td>-0.283151</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.259938</td>\n",
       "      <td>0.221382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>0.575814</td>\n",
       "      <td>0.582458</td>\n",
       "      <td>-0.259938</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.012051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rain</th>\n",
       "      <td>0.080158</td>\n",
       "      <td>0.039237</td>\n",
       "      <td>0.221382</td>\n",
       "      <td>0.012051</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           temp     feels      gust     count      rain\n",
       "temp   1.000000  0.981014 -0.136722  0.575814  0.080158\n",
       "feels  0.981014  1.000000 -0.283151  0.582458  0.039237\n",
       "gust  -0.136722 -0.283151  1.000000 -0.259938  0.221382\n",
       "count  0.575814  0.582458 -0.259938  1.000000  0.012051\n",
       "rain   0.080158  0.039237  0.221382  0.012051  1.000000"
      ]
     },
     "execution_count": 347,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_to_graf2.corr(method=\"spearman\") # počítám korelaci podle Spearmana (název metody) páč tomu je jedno kdyby ta data náhodou neměla normální rozdělení (ale vypadá, že mají:))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c156ce93",
   "metadata": {},
   "source": [
    "### Interpretace vlivu počasí na výpůjčky kol"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00c2a4b6",
   "metadata": {},
   "source": [
    "Ze zkoumaných proměnných jsou zajímavé 3 vztahy: \n",
    "- A) teplota a výpůjčky (lépe vystihuje pocitová teplota (feels), protože ta zohledňuje i další vlastnosti počasí)\n",
    "- B) vítr a výpůjčky (počítáno s rychlostí větru v poryvech)\n",
    "- C) déšť a výpůjčky\n",
    "\n",
    "Metoda korelace:\n",
    "- korelace byla počítána methodou \"spearman\", protože ta dobře funguje aniž bychom museli zkoumat, zda mají data normální rozložení.\n",
    "\n",
    "Vzájemné závislosti proměnných:\n",
    "- (add A) Vztah pocitové teploty a počtu výpůjček kol dosahuje korelačního koeficientu 0,58. To ukazuje na poměrně silnou závislost počtu výpůjček kol na pocitové teplotě. Čím vyšší teplota je, tím víc výpůjček probíhá. \n",
    "- (add B) Vztah rychlosti větru v poryvech a počtu výpůjček kol dosahuje korelačního koeficientu -0,26. To ukazuje na slabou, ale pořád ještě povšimnutíhodnou závislost. Čím vyšší je rychlost větru, tím méně výpůjček probíhá. \n",
    "- (add C) Vztah úhrnu srážek a počtu výpůjček dosahuje korelačního koeficientu 0,01. To značí, že z těchto dat není patrná žádná závislost mezi deštěm a počtem výpůjček kol. \n",
    "\n",
    "Omezení vyplývající ze zvoleného postupu / další možnosti práce s daty:\n",
    "- u teploty a větru byly brány v potaz hodnoty vždy pro 12:00. Šlo by pracovat i s denním průměrem hodnot, nebo s jiným časem (časy) během dne. Šlo by také zjistit nejfrakventovanější časy výpůjček během dne a korelovat s počasím v těchto časech. \n",
    "- u větru byly brány v úvahy maximální rychlosti v poryvech (gust). Šlo by pracovat i s průměrnou hodnotou rychlosti větru (wind).\n",
    "- další metody, které by bylo možné provést: lineární regrese, P value, confidence interval\n",
    "\n",
    "Jiné:\n",
    "- Další faktory, které mohou ovlivňovat výpůjčky kol: \n",
    "    - cena výpůjčky (a její změny v čase)\n",
    "    - kvalita kol (a její změna v čase) \n",
    "    - reklama na tuto službu (a její změny v čase). \n",
    "    - Korelaci s počasím potom mohou rozbíjet víkendy (nebo svátky) a pracovní dny, volební dny, vládní COVID omezení (a homeoffice) další významné události (třeba dopravní omezení typu \"zavřeli mi most a tak pojedu jinak\") atd.\n",
    "- Poměrně mne překvapila nezjištěná korelace mezi deštěm a výpůjčkami kol. Čekal jsem, že tam bude. Nuže... z těhle dat nevyplývá:)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
